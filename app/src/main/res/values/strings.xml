<resources>
    <string name="app_name">Ciel</string>
    <!--Drawer srting-->
    <string name="open">Open</string>
    <string name="close">Close</string>


    <!--Tutorial contents-->
    <!--Chapter 0-->
    <string name="chapter0_content1">Introduction:\n
        Structured Query Language (SQL) is a standard language which allow accessing and manipulating databases.
    </string>
    <string name="chapter0_content2">Components of Database Language: \n\n
        1.\tData definition language (DDL)\n
        - Allow definition of data types, structures and any data constraints.\n
        - All definitions are stored in the database. \n\n
        2.\tData manipulation language (DML)\n
        – Query language of the data.\n
        – Gives basic data manipulation operators on data stored in database
    </string>

    <string name="chapter0_content3">Create Table Statment:\n
        ● to create a new table in database \n\n
        CREATE TABLE table_name (\n
        column1 datatype,\m
        column2 datatype,\n
	    column3 datatype, ... ); \n
        E.g. Create table Employee with 4 columns.

    </string>
    <string name="chapter0_content4">ALTER TABLE statement:\n
        ● to add, delete, or modify columns in an existing table\n
        ● to add and drop serval constraints in an existing table \n\n
        To add a column in a table:\n
        ALTER TABLE table_name\n
        ADD column_name datatype;\n\n
        E.g. Add column entry year to table Employee.
    </string>
    <string name="chapter0_content5">
        \nTo delete a column in a table:\n
        ALTER TABLE table_name\n
        DROP column_name datatype;\n\n
        E.g. Delete column entry year to table Employee.
    </string>
    <string name="chapter0_content6">
        \nTo change the data type a column in a table:\n
        ALTER TABLE table_name\n
        ALTER COLUMN column_name datatype;\n\n
        E.g. Change the data tpye to VARCHAR of the column Employee_name.
    </string>
    <string name="chapter0_content7">DROP TABLE: \n
        ● to drop an existing table in a database\n\n
        DROP TABLE table_name;\n
        E.g. Drop table Employee
    </string>
    <string name="chapter0_content8">INSERT INTO: \n
        ● to insert new records in a table.\n\n
        INSERT INTO table_name (column1, column2, column3, ...)\n
        VALUES (value1, value2, value3, ...);\n
        or\n
        INSERT INTO table_name\n
        VALUES (value1, value2, value3, ...);\n\n
        E.g. Insert a record into table Department
    </string>

    <string name="chapter0_content9">UPDATE: \n
        ● to modify the existing records in a table\n\n
        UPDATE table_name\n
        SET column1 = value1, column2 = value2, ...\n
        WHERE condition;\n\n
        E.g. Update Sam’s salary to $15000.
    </string>

    <string name="chapter0_content10">DELETE:\n
        ● to delete existing records in a table\n\n
        DELETE FROM table_name\n
        WHERE conditions;\n\n
        E.g. Delete the Sam’s record in table Employee.
    </string>

    <string name="chapter0_content11">SELECT Statement:\n
        ● to select data from a database.\n
        ● The data returned is stored in a result table, called the result-set.\n\n
        SELECT column1, column2, ...\n
        FROM table_name;\n
        E.g. Select columns Employee_name, Salary from table Employee
    </string>

    <string name="chapter0_content12">\n● to select all the fields in the table\n
        SELECT * FROM table_name;\n\n
        E.g. Select all columns and all rows from tables Employee
    </string>

    <string name="chapter0_content13">SELECT DISTINCT Statement: \n
        ● to return only distinct (different) values\n\n
        SELECT DISTINCT column1, column2, ...\n
        FROM table_name;\n\n
        E.g. Select distinct department id from employee.
    </string>

    <string name="chapter0_content14">WHERE Clause: \n
        ● to filter records and obtain only those records that suit a specified condition.\n\n
        SELECT column1, column2, ...\n
        FROM table_name\n
        WHERE condition;\n\n
        The following operators are used in a WHERE clause:
    </string>
    <string name="chapter0_content15">ORDER BY Keyword: \n
        ● to sort the result-set in ascending or descending order.\n
        ● by default, it sorts the records in ascending order .\n
        ● to sort the records in descending order, use the DESC keyword.\n\n
        SELECT column1, column2, ...\n
        FROM table_name\n
        ORDER BY column1, column2, ... ASC|DESC;\n\n
        E.g. Select employee name and salary from table Employee, list by the descending order of salary.
    </string>


    <!--Chapter 1-->
    <string name="chapter1_title">SQL Join \n</string>
    <string name="chapter1_content1">To mix up the rows from two or more tables with JOIN clause, set the connection by the related column between them.
            \n\nDifferent Types of JOINs:\n
            Inner Join\n
            \u00A0\u00A0 ● (INNER) JOIN\n
            Outer Join\n
            \u00A0\u00A0 ● LEFT (OUTER) JOIN\n
            \u00A0\u00A0 ● RIGHT (OUTER) JOIN\n
            \u00A0\u00A0 ● FULL (OUTER) JOIN\n
    </string>
    <string name="chapter1_content2">SELECT column_name(s)
        \nFROM table1
        \nINNER JOIN table2 ON
        \ntable1.column_name = table2.column_name;
        \n\nE.g. Select all columns (except salary) from tables Department and Employee by using INNER JOIN.</string>

    <string name="chapter1_content3">SELECT column_name(s)
        \nFROM table1
        \nLEFT JOIN table2 ON
        \ntable1.column_name = table2.column_name;
        \n\nE.g. Select all columns (except salary) from the table Employee by LEFT JOIN the table Department.
    </string>
    <string name="chapter1_content4">SELECT column_name(s)
        \nFROM table1
        \nRIGHT JOIN table2 ON table1.column_name = table2.column_name;
        \n\nE.g. Select all columns (except salary) from the table Department by RIGHT JOIN the table Employee.
    </string>
    <string name="chapter1_content5">SELECT column_name(s)
        \nFROM table1
        \nFULL OUTER JOIN table2 ON table1.column_name = table2.column_name;
        \n\nE.g. Select all columns from both Department table and Employee table by FULL OUTER JOIN.
    </string>

    <!--Chapter 2-->
    <string name="chapter2_title">SQL Aggregate\n</string>
    <string name="chapter2_content1">Aggregate function
        \n\u00A0  1. COUNT
        \n\u00A0  2. AVG
        \n\u00A0  3. SUM
        \n\u00A0 4. MIN
        \n\u00A0  5. MAX
        \n\nSQL Structure:
        \nSELECT Aggregate \nFunction(column_name)
        \nFROM table_name
        \nWHERE conditions
    </string>
    <string name="chapter2_content2">\n2. The AVG() function returns the average value of a numeric column.
        \nE.g. Calculate the average salary of the employee of Department ID=10.
    </string>
    <string name="chapter2_content3">\n3. The SUM() function returns the total sum of a numeric column.
        \nE.g. Calculate the sum of the salary of all the employee of Department ID=10.
    </string>
    <string name="chapter2_content4">\n4. The MIN() function returns the smallest value of the selected column.
        \nE.g. Find the minimum salary of the employee of Department ID=10.
    </string>
    <string name="chapter2_content5">\n5. The MAX() function returns the largest value of the selected column.
        \nE.g. Find the maximum salary of the employee of Department ID=10.
    </string>
    <string name="chapter2_content6">\n\n\u00A0\*\u00A0There is the correct order of SQL statment:\n\nSELECT column_name(s)
        \nFROM table_name
        \nWHERE condition
        \nGROUP BY column_name(s)
        \nHAVING condition
        \nORDER BY column_name(s);
</string>
    <!--Chapter 3-->
    <string name="chapter3_title">SQL Subquery\n</string>
    <string name="chapter3_content1">A subselect can be used in WHERE and HAVING clauses of an outer SELECT, INSERT, UPDATE, and DELETE.
        \n\n\u00A0 - The subquery or nested query (inner query) executes once before the main query.
        \n\n\u00A0 - The result of the subquery is used by the main query (outer query).
    </string>
    <string name="chapter3_content2">\nTips for using subqueries:\n
        \n\u00A0●	Enclose subqueries with brackets\n
        \n\u00A0●	Place subqueries on the right side of the comparison condition\n
        \n\u00A0●	The ORDER BY clause in the subquery is not required only if you are accomplishing  top-n analysis\n
        \n\u00A0●	Use single-row operators with single-row subqueries and use multiple-row operators with multiple-row subqueries\n
    </string>
    <string name="chapter3_content3">\nFor single-row subqueries
        \n\u00A0➢	return single row
        \n\u00A0➢	use single-row comparison operator
        \n\nTable of different operators:
    </string>
    <string name="chapter3_content4">\nFor multiple-row subqueries
        \n\u00A0➢	return more than one row
        \n\u00A0➢	use multiple-row comparison operator
        \n\nTable of different operators:
    </string>
    <string name="chapter3_content5">Top-N queries use for return the n largest or smallest values of a column.
        \nE.g. What are the top ten products? or What are the worst ten products? \n\u00A0\*\u00A0The returned values sets are based on Top-N queries.
        \n\ni.e. Select the first 10 results from table1.
        \nSELECT *
        \nFROM table1
        \nLIMIT 0, 10
</string>

</resources>
